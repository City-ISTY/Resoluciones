{
  "name": "MAIN_CONVOCATORIA",
  "nodes": [
    {
      "parameters": {
        "toRecipients": "={{ $('START').first().json.from.emailAddress.address }}",
        "subject": "=Revisión de Convocatoria - {{ $('createUUID').item.json.uuid }}",
        "bodyContent": "=Por favor verificar que los cambios se hayan realizado correctamente\n\n-----PARÁMETROS PROPUESTOS-----\n{{ $json.text_structured }}\n----------\n\nPOR FAVOR RESPONDER:\n- Para continuar: Responda con \"APROBADO\" en el cuerpo del mensaje (No cambiar el asunto)\n- Para realizar nuevos cambios, indicar el punto a cambiar, y el cambio que solicita.\n \nEn caso de haber más cambios, le contestaré en un minuto para que se verifique nuevamente.\n\nMuchas gracias y que tenga una buena tarde.\nAtte. Bruno ",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -4192,
        64
      ],
      "id": "a1bc626c-f445-4ad2-bfb9-2d1b66b2f43a",
      "name": "Send a message",
      "webhookId": "ace6381b-ed18-445b-bc12-f00450c6438d",
      "alwaysOutputData": false,
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "aa1g0ggoDcXs6rTB",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1f399e97-0322-4e85-acbb-c3fffec204fd",
              "leftValue": "={{ $json.finded }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3552,
        64
      ],
      "id": "c8a0a684-68f4-451b-b7be-ada7be539275",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Ordenar todos los mensajes por fecha (más reciente primero)\nconst sortedMessages = $input.all().sort((a, b) => {\n    const dateA = new Date(a.json.sentDateTime).getTime();\n    const dateB = new Date(b.json.sentDateTime).getTime();\n    return dateB - dateA;\n});\n\nif (sortedMessages.length === 0 || \n    (sortedMessages.length === 1 && Object.keys(sortedMessages[0].json).length === 0)) {\n    return [{\"finded\": false}];\n}else if(sortedMessages[0].json.from.emailAddress.address === \"city@isty.edu.ec\"){\n  return [{\"finded\": false}];\n}\n\nsortedMessages[0].json.finded = true;\nreturn sortedMessages[0];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3744,
        64
      ],
      "id": "6aa2efdc-405b-43e2-aba5-4ca0d2beff6c",
      "name": "ExtractLastMailResponse",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 10,
        "output": "fields",
        "fields": [
          "body",
          "bodyPreview",
          "createdDateTime",
          "receivedDateTime",
          "sentDateTime",
          "subject",
          "from"
        ],
        "filtersUI": {
          "values": {
            "filterBy": "search",
            "search": "={{ $('createUUID').first().json.uuid }}"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -3968,
        64
      ],
      "id": "93b1f3c4-cddd-4a22-bc99-ede4573799bb",
      "name": "Get many messages",
      "webhookId": "d8e3e4a8-34f0-4e5e-8836-6307a8ce30c1",
      "retryOnFail": false,
      "maxTries": 5,
      "waitBetweenTries": 1,
      "notesInFlow": false,
      "alwaysOutputData": true,
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "aa1g0ggoDcXs6rTB",
          "name": "Microsoft Outlook account"
        }
      },
      "notes": "Error sfdasdfasd"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -3328,
        208
      ],
      "id": "4092eeb6-5a5a-4746-9fce-6882900e8418",
      "name": "Wait",
      "webhookId": "370dc68f-704b-4296-bc9c-118522873b2c"
    },
    {
      "parameters": {
        "jsCode": "const output_data = $('Information Extractor').first().json.output\n\n\n//Se agrega al RECTOR como asistenta\noutput_data.asistentes.unshift({\n  \"name\": \"Mgtr. Javier Hernando Garzón Espinoza\",\n  \"mail\": $env.N8N_RECTOR_EMAIL,\n  \"role\": \"Rector\",\n  \"principal\": true\n})\n\n\nconst teamsDataMeeting = {}\n\nteamsDataMeeting.isOnlineMeeting = true\nteamsDataMeeting.onlineMeetingProvider = \"teamsForBusiness\"\n\n\n\n\nconst fechaInicio = new Date(output_data.fecha);\nif (fechaInicio.getMinutes() === 0) {\n    fechaInicio.setHours(13, 0, 0, 0);\n}\n\nconst fechaFin = new Date(fechaInicio);\nfechaFin.setHours(fechaInicio.getHours() + 2);\n\n\nteamsDataMeeting.start = {\n    \"dateTime\": fechaInicio,\n    \"timeZone\": \"America/Guayaquil\"\n}\n\nteamsDataMeeting.end = {\n    \"dateTime\": fechaFin,\n    \"timeZone\": \"America/Guayaquil\"\n}\nteamsDataMeeting.attendees = output_data.asistentes.map((at)=>{\n  return({ \"emailAddress\": {\"address\": at.mail, \"name\": at.name}, \n  \"type\": \"optional\"})\n})\n\n//LE CREO A SECRETARÍA COMO ASISTENTE\nteamsDataMeeting.attendees.push({\n\"emailAddress\": {\n  \"address\": $env.N8N_SECRETARY_EMAIL,\n  \"name\": \"SECRETARÍA\"\n  },\n\"type\": \"optional\"\n})\noutput_data.body =teamsDataMeeting\n\n\n\nconst number_session = output_data.tipo.toLowerCase() == \"ordinaria\" ? \n    ('00' + (Number($input.first().json.ordinary_session_number + 1))).slice(-3) : \n    ('00' + (Number($input.first().json.extraordinary_session_number + 1))).slice(-3)\n  \n  //if \n  output_data.session_code = `OCS-S${output_data.tipo.toLowerCase() == \"ordinaria\" ? \"O\" : \"E\"}-${number_session}-${$today.toString().substring(0, 4)}`\n\nteamsDataMeeting.subject = `Sesion ${output_data.tipo} ${output_data.session_code}`\n\n\nreturn [{ \"output\": output_data }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        32
      ],
      "id": "9c6eae2a-130f-46cc-8ea1-c24a3b7ac61b",
      "name": "formatDataForMeeting"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9a0677ba-f1ff-4092-801e-8e62a7359b97",
              "leftValue": "={{ $json.changes }}",
              "rightValue": "=/(h?[aá]\\s*p?\\s*r\\s*[oó]\\s*[bv]\\s*[aá]\\s*d\\s*[oó])/i",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3136,
        48
      ],
      "id": "17f35827-298d-45d5-9af7-a3ca965b6eb4",
      "name": "approved"
    },
    {
      "parameters": {
        "action": "generate",
        "dataPropertyName": "uuid"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -4480,
        64
      ],
      "id": "acdd142c-d24c-4e6c-9c01-31b3ac826c37",
      "name": "createUUID"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.microsoft.com/v1.0/me/events",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\",\n  \"Accept\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('formatDataForMeeting').first().json.output.body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2208,
        32
      ],
      "id": "3bb1a885-72da-4c65-b153-7112fb11d719",
      "name": "create_teams_meeting",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "Y5GP57FlaZyiBK8B",
          "name": "Microsoft account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "Cx1WvsvMR6tSQYi5",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "meeting_type": "={{ $('formatDataForMeeting').first().json.output.tipo }}",
            "meeting_datetime_ISO8631": "={{ $json.start.dateTime }}",
            "convocation_date_ISO8631": "={{ $today }}",
            "session_code": "={{ $('formatDataForMeeting').first().json.output.session_code }}",
            "attendees": "={{ $('formatDataForMeeting').first().json.output.asistentes.filter(item => !item.principal) }}",
            "teams_link": "={{ $json.onlineMeeting.joinUrl }}",
            "meeting_topics": "={{ $('formatDataForMeeting').first().json.output.temas }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "meeting_type",
              "displayName": "meeting_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "meeting_datetime_ISO8631",
              "displayName": "meeting_datetime_ISO8631",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "convocation_date_ISO8631",
              "displayName": "convocation_date_ISO8631",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "session_code",
              "displayName": "session_code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "attendees",
              "displayName": "attendees",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array"
            },
            {
              "id": "teams_link",
              "displayName": "teams_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "meeting_topics",
              "displayName": "meeting_topics",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -2016,
        32
      ],
      "id": "54724979-bb9f-43a5-9048-8e24db0ce7cc",
      "name": "PDF_CONVOCATORIA"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "k6Op54V8oySaHd25",
          "mode": "list",
          "cachedResultName": "SAVE_METADATA"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "topics": "={{ $('formatDataForMeeting').first().json.output.temas }}",
            "meeting_datetime_ISO8631": "={{ $('create_teams_meeting').first().json.start.dateTime }}",
            "convocation_date_ISO8631": "={{ $today.setLocale('es').toISODate() }}",
            "meeting_type": "={{ $('formatDataForMeeting').first().json.output.tipo }}",
            "attendees": "={{ $('formatDataForMeeting').first().json.output.asistentes }}",
            "id_meeting": "={{ $('createUUID').first().json.uuid }}",
            "session_code": "={{ $('formatDataForMeeting').first().json.output.session_code }}",
            "meeting_url": "={{ $('create_teams_meeting').first().json.onlineMeeting.joinUrl }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "id_meeting",
              "displayName": "id_meeting",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "meeting_url",
              "displayName": "meeting_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "meeting_datetime_ISO8631",
              "displayName": "meeting_datetime_ISO8631",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "convocation_date_ISO8631",
              "displayName": "convocation_date_ISO8631",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "meeting_type",
              "displayName": "meeting_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "session_code",
              "displayName": "session_code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "attendees",
              "displayName": "attendees",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array",
              "removed": false
            },
            {
              "id": "topics",
              "displayName": "topics",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -1824,
        32
      ],
      "id": "4e4402f0-8b27-4795-a5ff-2fcc69c3666e",
      "name": "SAVE_METADATA"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "sessions_resolutions",
        "limit": 1,
        "filterType": "none"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2576,
        32
      ],
      "id": "c913c6e3-4c40-4110-a735-480b4edbda97",
      "name": "GET_RESOLUTIONS",
      "credentials": {
        "supabaseApi": {
          "id": "7iDL76ggTML8vg0b",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -2928,
        16
      ],
      "id": "df702324-4107-4f41-bf6d-c7c21522fabd",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "0Zr2gDUeSEg2Xe6E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "\n{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"fecha\": {\n\t\t\t\"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n\t\t\"tipo\":{\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"asistentes\":{\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\":\"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"mail\": {\n\t\t\t\t\t\t\"type\":\"string\",\n                        \"format\": \"email\"\n\t\t\t\t\t},\n\t\t\t\t\t\"role\": {\n\t\t\t\t\t\t\"type\":\"string\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"temas\":{\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"topic\":{\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"sub_topics\":{\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -2880,
        -400
      ],
      "id": "c08e677f-55d6-48dd-8206-5d838835c825",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -3040,
        -368
      ],
      "id": "40fc77aa-81d5-415c-b2e9-8e81d09e76bc",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "0Zr2gDUeSEg2Xe6E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\n\nHere is the text\n{{ $json.previous_act_formatted }}",
        "hasOutputParser": true,
        "needsFallback": true,
        "messages": {
          "messageValues": [
            {
              "message": " You are an expert extraction algorithm. Only extract relevant information from the text. If you do not know the value of an attribute asked to extract, you may omit the attribute's value. You must always return valid JSON fenced by a markdown code block. Do not return any additional text.     System: You are an expert extraction algorithm.\\nOnly extract relevant information from the text.\\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value.\\nYou must always return valid JSON fenced by a markdown code block. Do not return any additional text.\\nYou must format your output as a JSON value that adheres to a given \"JSON Schema\" instance.\\n\\n\"JSON Schema\" is a declarative language that allows you to annotate and validate JSON documents.\\n\\nFor example, the example \"JSON Schema\" instance {{\"properties\": {{\"foo\": {{\"description\": \"a list of test words\", \"type\": \"array\", \"items\": {{\"type\": \"string\"}}}}}}, \"required\": [\"foo\"]}}}}\\nwould match an object with one required property, \"foo\". The \"type\" property specifies \"foo\" must be an \"array\", and the \"description\" property semantically describes it as \"a list of test words\". The items within \"foo\" must be strings.\\nThus, the object {{\"foo\": [\"bar\", \"baz\"]}} is a well-formatted instance of this example \"JSON Schema\". The object {{\"properties\": {{\"foo\": [\"bar\", \"baz\"]}}}} is not well-formatted.\\n\\nYour output will be parsed and type-checked according to the provided schema instance, so make sure all fields in your output match the schema exactly and there are no trailing commas!"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -2928,
        -224
      ],
      "id": "5447b68b-a4eb-455d-9d9b-2f850a84d40a",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -2768,
        16
      ],
      "id": "d05674e3-6663-4fe9-a72e-7ec2314f4ee6",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "0Zr2gDUeSEg2Xe6E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "sessions_resolutions",
        "filters": {
          "conditions": [
            {
              "keyName": "extraordinary_session_number",
              "condition": "gt",
              "keyValue": "0"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "extraordinary_session_number",
              "fieldValue": "={{$('formatDataForMeeting').item.json.output.tipo.toLowerCase() == \"extraordinaria\"?  $('GET_RESOLUTIONS').item.json.extraordinary_session_number+1: $('GET_RESOLUTIONS').item.json.extraordinary_session_number}}"
            },
            {
              "fieldId": "ordinary_session_number",
              "fieldValue": "={{$('formatDataForMeeting').item.json.output.tipo.toLowerCase() == \"ordinaria\"? $('GET_RESOLUTIONS').item.json.ordinary_session_number+1: $('GET_RESOLUTIONS').item.json.ordinary_session_number}}"
            },
            {
              "fieldId": "last_session_type",
              "fieldValue": "={{$('formatDataForMeeting').item.json.output.tipo.toLowerCase() == \"ordinaria\"?\"O\":\"E\" }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1584,
        32
      ],
      "id": "d123a543-6ef4-4128-b7ab-160239b4663d",
      "name": "UPDATE_SESSION_NUMBER",
      "credentials": {
        "supabaseApi": {
          "id": "7iDL76ggTML8vg0b",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -5056,
        240
      ],
      "id": "fc66f7a3-8e85-403d-a18e-fbb9f6538918",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "0Zr2gDUeSEg2Xe6E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "\n{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"fecha\": {\n\t\t\t\"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n\t\t\"tipo\":{\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"asistentes\":{\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\":\"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"mail\": {\n\t\t\t\t\t\t\"type\":\"string\",\n                        \"format\": \"email\"\n\t\t\t\t\t},\n\t\t\t\t\t\"role\": {\n\t\t\t\t\t\t\"type\":\"string\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"temas\":{\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"topic\":{\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"sub_topics\":{\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -4992,
        -80
      ],
      "id": "90608f31-2238-421f-a3dd-19625757ad0d",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -5152,
        -80
      ],
      "id": "edec0a8a-2d7a-4347-a391-fc581689c569",
      "name": "Google Gemini Chat Model4",
      "credentials": {
        "googlePalmApi": {
          "id": "0Zr2gDUeSEg2Xe6E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Aquí está el documento para procesar:\n\n{{ \n//Se analiza si es un correo antiguo el que se está procesando\n    (() => {\n        try {\n             $('CLEAN_RESPONSE').first();\n            return true\n        } catch (error) {\n            return false;\n        }\n    })() ?\n  //CASO VERDADERO, SE COLOCA LA INFORMACION QUE SE TENIA ALMACENADA     \n$('CLEAN_RESPONSE').first().json.previous_act_formatted:\n//CASO FALSO, SE COLOCA LA INFORMACION QUE LLEGA DEL CORREO NUEVO\n$('CLEAN_ENTRY').first().json.message\n}}\n\n{{ \n//Se HACE EL MISMO ANALISIS, SI ES UN CORREO NUEVO, VA A INCLUIR EL CAMPO \"CAMBIOS\", SI NO, AQUÍ SE LO COLOCO\n    (() => {\n        try {\n             $('CLEAN_RESPONSE').first();\n            return true\n        } catch (error) {\n            return false;\n        }\n    })() ?\n  //CASO VERDADERO, SE COLOCA LA INFORMACION QUE SE TENIA ALMACENADA     \n\"CAMBIOS:\"+\"\\n\"+ $('CLEAN_RESPONSE').first().json.changes.replace(/^(\\r?\\n)+|(\\r?\\n)+$/g, ''):\n//CASO FALSO, NO SE COLOCA LA SECCION \"CAMBIOS\" POR QUE SE SUPONE QUE AL SER UN NUEVO CORREO ENTRANTE, EL USUARIO YA COLCA ESA PARTE.\n\"\"\n}}\n",
        "hasOutputParser": true,
        "needsFallback": true,
        "messages": {
          "messageValues": [
            {
              "message": "Eres un asistente de oficina altamente preciso, especializado en modificar borracciones de actas. Tu tarea es procesar un texto que contiene un \"Texto Original\" y una sección de \"CAMBIOS\".\n\n**Instrucciones Obligatorias:**\n\n1.  Tu única función es generar una nueva versión del \"Texto Original\" que incorpore los cambios especificados en la sección \"CAMBIOS\".\n2.  Si la sección \"CAMBIOS\" está vacía o no existe, devuelve el \"Texto Original\" sin ninguna modificación.\n3.  Conserva rigurosamente la estructura, sangrías, formato general y el separador \"|\" del \"Texto Original\".\n4.  Si eliminas un ítem de una lista, actualiza la numeración secuencial de los ítems restantes.\n5.  Cualquier sección no mencionada en \"CAMBIOS\" debe permanecer idéntica.\n6.  Solo puedes modificar: Fecha, Tipo, Asistentes y Temas. No alteres la estructura principal.\n7.  **Regla de Salida CRÍTICA:** Tu respuesta debe ser EXCLUSIVAMENTE el texto modificado en formato de texto plano. No incluyas explicaciones, saludos, comentarios, ni lo envuelvas en comillas o bloques de código.\n8.  Si encuentras al asistente \"Mgtr Javier Hernando Espinoza Garzón\", eliminalo"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -5040,
        80
      ],
      "id": "c921f2dd-e98d-485f-a0ac-30b8cfb4c397",
      "name": "Information Extractor1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -4896,
        240
      ],
      "id": "1f34ae12-0ee2-450b-969e-a16d8d75e4e3",
      "name": "Google Gemini Chat Model5",
      "credentials": {
        "googlePalmApi": {
          "id": "0Zr2gDUeSEg2Xe6E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const output_structured_data = $('Information Extractor1').first().json.output\n\nfunction formatDataToText(data) {\n  // Usamos un array para ir construyendo cada línea del texto.\n  const outputLines = [];\n\n  // 1. Formatear Fecha\n  outputLines.push(`1| Fecha: ${data.fecha}`);\n\n  // 2. Formatear Tipo\n  outputLines.push(`2| Tipo: ${data.tipo}`);\n\n  // 3. Formatear Asistentes\n  outputLines.push(`3| Asistentes:`);\n  if (data.asistentes && data.asistentes.length > 0) {\n    data.asistentes.forEach((asistente, index) => {\n      const num = `3.${index + 1}`;\n      const asistenteInfo = `${asistente.name} - ${asistente.mail} - ${asistente.role}`;\n      // Añadimos sangría para el subnivel\n      outputLines.push(`   ${num}| ${asistenteInfo}`);\n    });\n  }\n\n  // 4. Formatear Temas a resolver (con subniveles)\n  outputLines.push(`4| Temas a resolver`);\n  if (data.temas && data.temas.length > 0) {\n    data.temas.forEach((tema, topicIndex) => {\n      const topicNum = `4.${topicIndex + 1}`;\n      // Añadimos sangría para el primer nivel de temas\n      outputLines.push(`   ${topicNum}| ${tema.topic}`);\n\n      // Verificamos si hay sub-temas para anidar\n      if (tema.sub_topics && tema.sub_topics.length > 0) {\n        tema.sub_topics.forEach((subTopic, subTopicIndex) => {\n          const subTopicNum = `${topicNum}.${subTopicIndex + 1}`;\n          // Añadimos una sangría mayor para el segundo nivel\n          outputLines.push(`      ${subTopicNum}| ${subTopic}`);\n        });\n      }\n    });\n  }\n\n  // Unimos todas las líneas en un solo string, separadas por un salto de línea.\n  return outputLines.join('\\n');\n}\n\n\nconst text_structured = formatDataToText(output_structured_data)\nconsole.log(text_structured)\n\nreturn [{json:{text_structured}}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4336,
        64
      ],
      "id": "6018496e-071d-4ab9-87b4-bc1185a905ec",
      "name": "FORMAT_TO_TEXT"
    },
    {
      "parameters": {
        "jsCode": "const htmlContent = $input.first().json.body.content || '';\n// Dividir por la etiqueta <hr> y tomar solo la primera parte\nconst html_split = htmlContent.split(/<hr[^>]*>/i);\nconst user_suggest = html_split[0] || '';\n\n\nconst formatHtmlContent = (html) => {\n  return html\n    .replace(/<div[^>]*>/gi, '') // Eliminar apertura de divs\n    .replace(/<\\/div>/gi, '\\n')   // Convertir cierre de divs en saltos de línea\n    .replace(/<br\\s*\\/?>/gi, '\\n') // Convertir <br> en saltos de línea\n    .replace(/&nbsp;/g, ' ')      // Reemplazar espacios no breaking\n    .replace(/\\n{3,}/g, '\\n\\n')   // Reducir múltiples saltos de línea\n    .replace(/<[^>]*>/g, '');     // Eliminar el resto de etiquetas HTML\n};\n\nconst message = formatHtmlContent(user_suggest);\n\n\nreturn [{ json: { message: message } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5232,
        80
      ],
      "id": "906cf2ae-8907-42a8-9ead-1231693f2f0b",
      "name": "CLEAN_ENTRY"
    },
    {
      "parameters": {
        "jsCode": "const htmlContent = $input.first().json.body.content || '';\n// Dividir por la etiqueta <hr> y tomar solo la primera parte\nconst html_split = htmlContent.split(/<hr[^>]*>/gi);\nconst user_suggest = html_split[0] || '';\nconst previous_act = html_split[1] || '';\nconst regex = /-----PARÁMETROS PROPUESTOS-----([\\s\\S]*?)----/;\nconst match = previous_act.match(regex);\nlet textoExtraido = match ? match[1].trim() : '';\n\nconst formatHtmlContent = (html) => {\n  return html\n    .replace(/<div[^>]*>/gi, '') // Eliminar apertura de divs\n    .replace(/<\\/div>/gi, '\\n')   // Convertir cierre de divs en saltos de línea\n    .replace(/<br\\s*\\/?>/gi, '\\n') // Convertir <br> en saltos de línea\n    .replace(/&nbsp;/g, ' ')      // Reemplazar espacios no breaking\n    .replace(/\\n{3,}/g, '\\n\\n')   // Reducir múltiples saltos de línea\n    .replace(/<[^>]*>/g, '');     // Eliminar el resto de etiquetas HTML\n};\n\nconst changes = formatHtmlContent(user_suggest);\nconst previous_act_formatted = formatHtmlContent(textoExtraido);\n\n\nreturn [{ json: { changes: changes, previous_act_formatted: previous_act_formatted, previous_act: previous_act } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3328,
        48
      ],
      "id": "1c297a92-36dc-4486-b85f-21496816a91e",
      "name": "CLEAN_RESPONSE"
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": {
          "__rl": true,
          "value": "={{ $('ExtractLastMailResponse').last().json.id }}",
          "mode": "id"
        },
        "message": "=Listo, por favor verificar que los cambios se hayan realizado correctamente<br>\n-----PARÁMETROS PROPUESTOS-----<br>\n{{ \n    $json.text_structured\n      .replace(/\\r?\\n/g, '<br>')\n      .replace(/\\s{2,}/g, ' &nbsp;')\n}}\n<br>\n----------<br><br>\nPOR FAVOR RESPONDER:<br>\n- Para continuar: Responda con \"APROBADO\" en el cuerpo del mensaje (No cambiar el asunto)<br>\n- Para realizar nuevos cambios, indicar el punto a cambiar, y el cambio que solicita.<br>\nEn caso de haber más cambios, le contestaré en 30 segundos para que se verifique nuevamente.<br>\nMuchas gracias y que tenga una buena tarde.<br>\nAtte. Bruno",
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -4272,
        304
      ],
      "id": "c6c2f9f3-9e4b-49a8-9b90-a5cec998def2",
      "name": "Reply to a message",
      "webhookId": "425d96da-f199-4725-b573-3bfdbd624f35",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "aa1g0ggoDcXs6rTB",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a2d0f93c-0d73-4939-821a-92f351259159",
              "leftValue": "={{ \n//Se analiza si es un correo antiguo el que se está procesando\n    (() => {\n        try {\n             $('CLEAN_RESPONSE').first();\n            return true\n        } catch (error) {\n            return false;\n        }\n    })()\n}}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4688,
        80
      ],
      "id": "e02d9a1a-275c-4635-bb19-ca27350b3cb1",
      "name": "IS_NEW_EMAIL"
    },
    {
      "parameters": {
        "jsCode": "const output_structured_data = $('Information Extractor1').first().json.output\n\nfunction formatDataToText(data) {\n  // Usamos un array para ir construyendo cada línea del texto.\n  const outputLines = [];\n\n  // 1. Formatear Fecha\n  outputLines.push(`1| Fecha: ${data.fecha}`);\n\n  // 2. Formatear Tipo\n  outputLines.push(`2| Tipo: ${data.tipo}`);\n\n  // 3. Formatear Asistentes\n  outputLines.push(`3| Asistentes:`);\n  if (data.asistentes && data.asistentes.length > 0) {\n    data.asistentes.forEach((asistente, index) => {\n      const num = `3.${index + 1}`;\n      const asistenteInfo = `${asistente.name} - ${asistente.mail} - ${asistente.role}`;\n      // Añadimos sangría para el subnivel\n      outputLines.push(`   ${num}| ${asistenteInfo}`);\n    });\n  }\n\n  // 4. Formatear Temas a resolver (con subniveles)\n  outputLines.push(`4| Temas a resolver`);\n  if (data.temas && data.temas.length > 0) {\n    data.temas.forEach((tema, topicIndex) => {\n      const topicNum = `4.${topicIndex + 1}`;\n      // Añadimos sangría para el primer nivel de temas\n      outputLines.push(`   ${topicNum}| ${tema.topic}`);\n\n      // Verificamos si hay sub-temas para anidar\n      if (tema.sub_topics && tema.sub_topics.length > 0) {\n        tema.sub_topics.forEach((subTopic, subTopicIndex) => {\n          const subTopicNum = `${topicNum}.${subTopicIndex + 1}`;\n          // Añadimos una sangría mayor para el segundo nivel\n          outputLines.push(`      ${subTopicNum}| ${subTopic}`);\n        });\n      }\n    });\n  }\n\n  // Unimos todas las líneas en un solo string, separadas por un salto de línea.\n  return outputLines.join('\\n');\n}\n\n\nconst text_structured = formatDataToText(output_structured_data)\nconsole.log(text_structured)\n\nreturn [{json:{text_structured}}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4416,
        304
      ],
      "id": "b58e099e-6e97-42f0-b4f2-50fec289a4b8",
      "name": "FORMAT_TO_TEXT1"
    },
    {
      "parameters": {
        "toRecipients": "=aatituanav@uce.edu.ec",
        "subject": "=PROGRAMACIÓN SESIÓN {{ $('formatDataForMeeting').item.json.output.tipo.toUpperCase() }} - {{ $('formatDataForMeeting').item.json.output.session_code }}",
        "bodyContent": "=Buen día.\n\nSe informa la programación de la sesión {{ \n    $('formatDataForMeeting').first().json.output.tipo.charAt(0).toUpperCase() + \n    $('formatDataForMeeting').first().json.output.tipo.slice(1).toLowerCase() \n}} {{ $('formatDataForMeeting').first().json.output.session_code }} para el día {{ DateTime.fromISO($('formatDataForMeeting').first().json.output.fecha).setLocale('es').format(\"d 'de' MMMM 'de' yyyy\") }}, a las {{   $('formatDataForMeeting').first().json.output.fecha.split('T')[1].split(':').slice(0, 2).join(':') }} en el cual se notificó a los siguientes asistentes:\n{{ $('formatDataForMeeting').first().json.output.asistentes.map(at=>at.name+\" - \"+at.mail+\"\\n\").join(\"\") }}\n\nSe adjunta los links para la toma de asistencia y votos: \nASISTENCIA: \n{{ $('SAVE_METADATA').first().json.url_attendances }}\nVOTOS:\n{{ $('SAVE_METADATA').first().json.urt_votes }}\n\nNOTA: Se procederá al firmado del acta por parte de los asistentes, una vez listo, se le notificará por este medio.\n\n\nAtte.\nCentro de Innovacion Tecnológica Yaruquí\n\n",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -1584,
        -192
      ],
      "id": "3cd694ce-3fe7-4f64-ba73-ee9e2f40a2f4",
      "name": "SEND_NOTIFICATION",
      "webhookId": "2e2dc7da-ecfe-405f-81dd-051e53bdc105",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "aa1g0ggoDcXs6rTB",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "w9px2GcY6A7pU9tt",
          "mode": "list",
          "cachedResultName": "SEND_PDF_TO_SIGN"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "binary_pdf_file_item": "={{ $('PDF_CONVOCATORIA').item}}",
            "attendees": "={{ $('formatDataForMeeting').item.json.output.asistentes }}",
            "meeting_type": "={{ $('formatDataForMeeting').item.json.output.tipo }}",
            "session_code": "={{ $('formatDataForMeeting').item.json.output.session_code }}",
            "subject": "=CONVOCATORIA SESIÓN"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "subject",
              "displayName": "subject",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "meeting_type",
              "displayName": "meeting_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "session_code",
              "displayName": "session_code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "binary_pdf_file_item",
              "displayName": "binary_pdf_file_item",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            },
            {
              "id": "attendees",
              "displayName": "attendees",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -1584,
        256
      ],
      "id": "f4d70c1a-d61c-4d00-85f9-892858c69d41",
      "name": "SIGN_MEETING_CALL"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "custom",
              "cronExpression": "0/10 * * * * *"
            }
          ]
        },
        "output": "fields",
        "fields": [
          "body",
          "from",
          "subject"
        ],
        "filters": {
          "custom": "not(startswith(subject, 'RE:')) and contains(subject, 'iniciar')",
          "foldersToInclude": [
            "AQMkADU1ADM4MzJjNy1lY2FiLTRhZDktYTI3YS0wOGE1NjlmNmUyZjAALgAAAxCSmJKBWdRBnpaPEAI69OcBAIlriLCKeQFCg0qLNcoX9M4AAAIBDAAAAA=="
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlookTrigger",
      "typeVersion": 1,
      "position": [
        -5424,
        48
      ],
      "id": "03184302-200c-43ef-9d1a-186caa57eb5a",
      "name": "START",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "aa1g0ggoDcXs6rTB",
          "name": "Microsoft Outlook account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Send a message": {
      "main": [
        [
          {
            "node": "Get many messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "CLEAN_RESPONSE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ExtractLastMailResponse": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many messages": {
      "main": [
        [
          {
            "node": "ExtractLastMailResponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get many messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "formatDataForMeeting": {
      "main": [
        [
          {
            "node": "create_teams_meeting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "approved": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Information Extractor1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "createUUID": {
      "main": [
        [
          {
            "node": "FORMAT_TO_TEXT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create_teams_meeting": {
      "main": [
        [
          {
            "node": "PDF_CONVOCATORIA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF_CONVOCATORIA": {
      "main": [
        [
          {
            "node": "SAVE_METADATA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SAVE_METADATA": {
      "main": [
        [
          {
            "node": "SIGN_MEETING_CALL",
            "type": "main",
            "index": 0
          },
          {
            "node": "SEND_NOTIFICATION",
            "type": "main",
            "index": 0
          },
          {
            "node": "UPDATE_SESSION_NUMBER",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET_RESOLUTIONS": {
      "main": [
        [
          {
            "node": "formatDataForMeeting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "GET_RESOLUTIONS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Information Extractor1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor1": {
      "main": [
        [
          {
            "node": "IS_NEW_EMAIL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor1",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "FORMAT_TO_TEXT": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CLEAN_ENTRY": {
      "main": [
        [
          {
            "node": "Information Extractor1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CLEAN_RESPONSE": {
      "main": [
        [
          {
            "node": "approved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply to a message": {
      "main": [
        [
          {
            "node": "Get many messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IS_NEW_EMAIL": {
      "main": [
        [
          {
            "node": "createUUID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "FORMAT_TO_TEXT1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FORMAT_TO_TEXT1": {
      "main": [
        [
          {
            "node": "Reply to a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "START": {
      "main": [
        [
          {
            "node": "CLEAN_ENTRY",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "738a194d-2794-4b0a-bb97-38dcd8c8c195",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "54ec11882ca9b3e82b062f751bf5d6c4d986ec6ac834af1d71fe0dcbd9b6a5cf"
  },
  "id": "SLVqwK2jzeuGVdkf",
  "tags": [
    {
      "createdAt": "2025-09-19T21:36:18.579Z",
      "updatedAt": "2025-09-19T21:36:18.579Z",
      "id": "hIfCdV5CCo0ZPgJJ",
      "name": "MAIN"
    }
  ]
}