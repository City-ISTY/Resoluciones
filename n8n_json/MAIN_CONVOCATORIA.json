{
  "name": "MAIN_CONVOCATORIA",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "custom",
              "cronExpression": "0/10 * * * * *"
            }
          ]
        },
        "output": "fields",
        "fields": [
          "body",
          "from",
          "subject"
        ],
        "filters": {
          "custom": "isRead eq false and not(startswith(subject, 'RE:')) and contains(subject, 'revisar')"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlookTrigger",
      "typeVersion": 1,
      "position": [
        -1792,
        160
      ],
      "id": "334e8ef4-8ee0-408e-9130-8bec51aa6d73",
      "name": "Microsoft Outlook Trigger",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "toRecipients": "={{ $('Microsoft Outlook Trigger').item.json.from.emailAddress.address }}",
        "subject": "=Revisión de Convocatoria - {{ $json.uuid }}",
        "bodyContent": "=Buenos días, se necesita su autorización para el agendamiento de la Convocatoria.\n\n-----PARÁMETROS PROPUESTOS-----\n{{ $json.message.replace(/^[\\r\\n]+|[\\r\\n]+$/g, '') }}\n----------\n\nPOR FAVOR RESPONDER:\n- Para continuar: Responda con \"APROBADO\" en el cuerpo del mensaje (No cambiar el asunto)\n- Para realizar nuevos cambios, indicar el punto a cambiar, y el cambio que solicita.\n \nEn caso de haber más cambios, le contestaré en un minuto para que se verifique nuevamente.\n\nMuchas gracias y que tenga una buena tarde.\nAtte. Bruno ",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -1248,
        160
      ],
      "id": "5b6573b5-c3d0-4521-b2e3-e2fc3813c2d6",
      "name": "Send a message",
      "webhookId": "ace6381b-ed18-445b-bc12-f00450c6438d",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1f399e97-0322-4e85-acbb-c3fffec204fd",
              "leftValue": "={{ $json.finded }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -640,
        160
      ],
      "id": "5af81c70-f6b8-4e3e-9fa1-be6d3909dad9",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": {
          "__rl": true,
          "value": "={{ $('ExtractLastMailResponse').item.json.id }}",
          "mode": "id"
        },
        "message": "=<div>\nListo, por favor verificar que los cambios se hayan realizado correctamente\n<br>\n-----PARÁMETROS PROPUESTOS-----<br>\n{{ $json.acta }}<br>\n----------\n<br><br>\nPOR FAVOR RESPONDER:\n<br>\n- Para continuar: Responda con \"APROBADO\" en el cuerpo del mensaje (No cambiar el asunto)<br>\n- Para realizar nuevos cambios, indicar el punto a cambiar, y el cambio que solicita.<br>\nEn caso de haber más cambios, le contestaré en 30 segundos para que se verifique nuevamente.<br>\nMuchas gracias y que tenga una buena tarde.<br>\nAtte. Bruno \n</div>",
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -1216,
        384
      ],
      "id": "22e4e2cb-a677-42bd-b725-527abc5feabd",
      "name": "Reply to a message",
      "webhookId": "425d96da-f199-4725-b573-3bfdbd624f35"
    },
    {
      "parameters": {
        "jsCode": "// Ordenar todos los mensajes por fecha (más reciente primero)\nconst sortedMessages = $input.all().sort((a, b) => {\n    const dateA = new Date(a.json.sentDateTime).getTime();\n    const dateB = new Date(b.json.sentDateTime).getTime();\n    return dateB - dateA;\n});\n\nif (sortedMessages.length === 0 || \n    (sortedMessages.length === 1 && Object.keys(sortedMessages[0].json).length === 0)) {\n    return [{\"finded\": false}];\n}else if(sortedMessages[0].json.from.emailAddress.address === \"andres.tituana@isty.edu.ec\"){\n  return [{\"finded\": false}];\n}\n\nsortedMessages[0].json.finded = true;\nreturn sortedMessages[0];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        160
      ],
      "id": "9b9c762c-508e-4d84-b233-c7fa4a4afd35",
      "name": "ExtractLastMailResponse",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 10,
        "output": "fields",
        "fields": [
          "body",
          "bodyPreview",
          "createdDateTime",
          "receivedDateTime",
          "sentDateTime",
          "subject",
          "from"
        ],
        "filtersUI": {
          "values": {
            "filterBy": "search",
            "search": "=UUID_TEST01"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -1008,
        160
      ],
      "id": "cceca839-102a-4d85-9cf2-2b95224b67ea",
      "name": "Get many messages",
      "webhookId": "d8e3e4a8-34f0-4e5e-8836-6307a8ce30c1",
      "retryOnFail": false,
      "maxTries": 5,
      "waitBetweenTries": 1,
      "notesInFlow": false,
      "alwaysOutputData": true,
      "notes": "Error sfdasdfasd"
    },
    {
      "parameters": {
        "amount": 20
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -400,
        336
      ],
      "id": "142a9890-55f9-49d5-9ce4-b97847e9e58b",
      "name": "Wait",
      "webhookId": "370dc68f-704b-4296-bc9c-118522873b2c"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "messages": {
          "values": [
            {
              "content": "Eres un sistema especializado en formateo y extracción de datos, se te da la entrada, y únicamente devuelves la información extraida de acuerdo al usuario.",
              "role": "model"
            },
            {
              "content": "=Tu tarea va a ser la de extraer la información en un determinado formato, para ello tu vas a recibir un mensaje crudo que son los datos para agendar una reunión.\nEl mensaje consta de la siguiente estructura: \n1. Fecha: La fecha y hora de la reunión\n2. Tipo: Ordinaria/Extraordinaria\n3. Asistentes: Las personas que participan en la reunión, se va a ir mostrando 3.1, 3.2, con forme el numero de personas.\n4. Temas a resolver: Un listado estructurado de temas.\n\nREALIZAR: \n1. En el punto 1, CONVIERTE la fecha a formato  ISO 8601 <AAAA-MM-DDTHH:MM>, si en ese punto no existe ninguna hora, coloca 12:00 por defecto\n2. Verifica los nombres de personas, deberan tener la primera letra mayuscula.\n3. Asegúrate que en el punto \"asistentes\", la estructura sea: nombre - correo - (campo opcional)\n4. Unicamente haz los ajustes necesarios, no cambies la estructura, ni la numeración, devuelve el texto sin formato.\nel texto es el siguiente \n5. PARSEA CUALQUIER SEPARADOR DE ÍNDICES (espacios, puntos, guiones, etc.) Y ESTANDARÍZALOS AL PIPE \"|\". \n  TOMA CUALQUIER FORMATO DE INDICE, POR EJEMPLO:\n  - \"n Texto\"\n  - \"n - Texto\" \n  - \"n: Texto\"\n  - \"n* Texto\"\n  Y CONVIÉRTELO A:\n  - \"n| Texto\"\nEso hazlo para absolutamente todos los indices.\n\n---TEXTO A ANALIZAR---\n {{ $json.previous_act_formatted }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "de7650da-6b9f-4fbb-8a88-22d92aa3c915",
      "name": "Formatea Datos"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "messages": {
          "values": [
            {
              "content": "Eres un asistente administrativo inteligente especializado en la corrección de documentos",
              "role": "model"
            },
            {
              "content": "=Tu tarea es tomar un borrador original de un correo electrónico (Texto 1) y un segundo texto con solicitudes de cambio (Texto 2). Debes generar una nueva versión del Texto 1 que incorpore únicamente los cambios especificados en el Texto 2, manteniendo intacta toda la estructura y el contenido no mencionado. \n\n\n\n *Instrucciones Obligatorias a seguir \n\n 1. Lee el Texto 1 para entender la estructura y el contenido original. Lee el Texto 2 para identificar qué parámetros específicos deben ser modificados. \n\n 2. Solo modifica las secciones del Texto 1 que se indica en el Texto 2 \n\n 3. Conserva la estructura, sangrías y formato general del Texto 1 en tu respuesta, pero actualiza las numeraciones en caso de que se eliminen items, y no cambies el formato de separador entre el indice y el contenido | \n\n 4. Conserva lo que no se menciona: Si una sección o parámetro del Texto 1 (como \"Tipo de sesión\" o uno de los temas) no se menciona en el Texto 2, debe permanecer exactamente igual en el resultado final.  \n\n 5. Devuelve únicamente el texto 1 con las correciones que se piden en el texto 2, no des ninguna explicación, ni algun otro comentario. \n\n 6. Formato de salida: Texto plano, devuelve EXCLUSIVAMENTE el texto modificado, sin envolverlo entre comillas \n\n Tu tarea es tomar un borrador original de un correo electrónico (Texto 1) y un segundo texto con solicitudes de cambio (Texto 2). Debes generar una nueva versión del Texto 1 que incorpore únicamente los cambios especificados en el Texto 2, manteniendo intacta toda la estructura y el contenido no mencionado.  \n\n*ESTRUCTURA DEL TEXTO1 \n\n1| Fecha: *Aquí se indica la fecha de la reunión*\n\n2| Tipo: *Unicamente puede tomar los valores Ordinaria o Extraordinaria*\n\n3| Asistentes: *Participantes de la reunion* orden: *nombre_asistente - correo_electrónico - cargo_función* elm \"3.1| Andrés Tituana - alvaro.andres1996@hotmail.com - Representante de Estudiantes\"\n\n4| Temas a resolver: *Siempre va a ser una lista de maximo dos niveles* ejm \n\n\"4.1| Aprobación de la designacion de los miembros del comité de ética del instituto superior tecnológico yaruquí, quedando conformado de la siguiente manera\n\n      4.1.1| Msc. Alfredo Armando Rodríquez Guzman, representante del Rector.\n\n\"\n\n\n\n  *Instrucciones Obligatorias a seguir  \n1. Lee el Texto 1 para entender la estructura y el contenido original. Lee el Texto 2 para identificar qué parámetros específicos deben ser modificados.  \n2. Solo modifica las secciones del Texto 1 que se indica en el Texto 2  \n3. Conserva la estructura, sangrías y formato general del Texto 1 en tu respuesta, pero actualiza las numeraciones en caso de que se eliminen items. \n4. Conserva lo que no se menciona: Si una sección o parámetro del Texto 1 (como \"Tipo de sesión\" o uno de los temas) no se menciona en el Texto 2, debe permanecer exactamente igual en el resultado final.   \n6. Devuelve únicamente el texto 1 con las correciones que se piden en el texto 2, no des ninguna explicación, ni algun otro comentario.  \n7. Si se te pide algun cambio fuera del formato del texto 1 establecido, no lo añadas, unicamtente te pueden pedir cambios de fecha, asistentes, tipo sesión o temas a resolver.\n\n8. La numeracion es estricta: 1-fecha, 2-tipo, 3-Asistentes, 4-temas. Nunca cambies la numeracion de los temas generales.\n9. Formato de salida: Devuelme unicamente el texto 1 en texto plano con los cambios realizados.\n\n\nTEXTO 1 - PARÁMETROS ORIGINALES:\n```{{ $json.previous_act_formatted }}```\nTEXTO 2 - CAMBIOS SOLICITADOS:\n```{{ $json.changes }}```"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        0,
        400
      ],
      "id": "1170d867-fdd7-4a27-8676-5a562552f7ed",
      "name": "Realizar Cambios"
    },
    {
      "parameters": {
        "jsCode": "\n// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfunction convertirTextoAObjeto(textoEstructurado) {\n\n  // 1. Inicialización del objeto resultado\n  const resultado = {\n    fecha: \"\",\n    tipo: \"\",\n    asistentes: [],\n    temas: []\n  };\n\n  // 2. Procesamiento del texto: dividirlo en líneas\n  const lineas = textoEstructurado.split('\\n').map(str => str.trim());\n\n  // 3. Iteración sobre cada línea\n  lineas.forEach(linea => {\n    // Separar el índice del contenido\n    const partes = linea.split('|');\n    if (partes.length < 2) return; // Ignorar líneas sin el separador \"|\"\n\n    const indiceStr = partes[0].trim();\n    const contenido = partes[1].trim();\n    const niveles = indiceStr.split('.'); // Separar los niveles del índice\n\n    // 4. Lógica de asignación según el primer nivel del índice\n    switch (niveles[0]) {\n      case '1':\n        // Asigna la fecha, eliminando el texto descriptivo\n        resultado.fecha = contenido.replace('Fecha: ', '');\n        break;\n      case '2':\n        // Asigna el tipo, eliminando el texto descriptivo\n        resultado.tipo = contenido.replace('Tipo: ', '');\n        break;\n      case '3':\n        // Si es un subnivel (ej: 3.1), es un asistente\n        if (niveles.length > 1) {\n          const [nombre, email, cargo] = contenido.split('-').map(s => s.trim());\n          resultado.asistentes.push({\n            name: nombre,\n            mail: email,\n            role: cargo\n          });\n        }\n        break;\n      case '4':\n        // Si tiene 2 niveles (ej: 4.1), es un tema principal\n        if (niveles.length === 2) {\n          resultado.temas.push({\n            topic: contenido,\n            sub_topics: [] // Preparamos un array para posibles sub_topics\n          });\n        }\n        // Si tiene 3 niveles (ej: 4.1.1), es un subtema del último tema agregado\n        else if (niveles.length === 3) {\n          // Obtenemos el último tema agregado para añadirle el subtema\n          const temaPadre = resultado.temas[resultado.temas.length - 1];\n          if (temaPadre) {\n            temaPadre.sub_topics.push(contenido);\n          }\n        }\n        break;\n    }\n  });\n\n  //Solo por ahora, como la reunion dura 2 horas en teoria se los voy a poner\n    console.log(resultado.fecha)\n  const fechaInicio = new Date(resultado.fecha);\n  console.log(fechaInicio)\n  const fechaFin = new Date(fechaInicio);\n\n\n  fechaFin.setHours(fechaInicio.getHours() + 2);\n  resultado.fechaFin = fechaFin.toISOString().slice(0, 16);\n  \n\n  const number_session = resultado.tipo.toLowerCase() == \"ordinaria\" ? \n    ('00' + (Number($input.first().json.ordinary_session_number)+1)).slice(-3) : \n    ('00' + (Number($input.first().json.extraordinary_session_number)+1)).slice(-3)\n  \n  //if \n  resultado.session_code = `OCS-S${resultado.tipo.toLowerCase() == \"ordinaria\" ? \"O\" : \"E\"}-${number_session}-${$today.toString().substring(0, 4)}`\n  \n  return resultado;\n}\noutput_data = convertirTextoAObjeto($('Formatea Datos').first().json.content.parts[0].text)\nconsole.log(output_data)\n\noutput_data.body = output_data.body || {};\noutput_data.body.isOnlineMeeting = true\noutput_data.body.onlineMeetingProvider = \"teamsForBusiness\"\noutput_data.body.subject = `Sesion ${output_data.tipo} ${output_data.session_code}`\noutput_data.body.start = {\n    \"dateTime\": output_data.fecha,\n    \"timeZone\": \"America/Guayaquil\"\n}\noutput_data.body.end = {\n    \"dateTime\": output_data.fechaFin,\n    \"timeZone\": \"America/Guayaquil\"\n}\noutput_data.body.attendees = output_data.asistentes.map((at)=>{\n  return({ \"emailAddress\": {\"address\": at.mail, \"name\": at.name}, \n  \"type\": \"optional\"})\n})\n\n\nreturn [{ \"output\": output_data }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        128
      ],
      "id": "fc4be84e-822b-415e-98ad-ea6cca4fc31f",
      "name": "formatDataForMeeting"
    },
    {
      "parameters": {
        "toRecipients": "={{ $('formatDataForMeeting').item.json.output.asistentes.map(asistente => asistente.mail).join(', ') }}",
        "subject": "Convocatoria Sessión",
        "bodyContent": "Buen día, se solicita su presencia en la sesión, por favor remitir el documento firmado.",
        "additionalFields": {
          "attachments": {
            "attachments": [
              {
                "binaryPropertyName": "data"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        1056,
        128
      ],
      "id": "397f7fbd-67d2-40bf-b4e9-06782cc1170c",
      "name": "sendDocument",
      "webhookId": "2e2dc7da-ecfe-405f-81dd-051e53bdc105"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bc69d1fd-6c2d-45b7-89bb-c32f8afb7a71",
              "name": "acta",
              "value": "={{ $json.content.parts[0].textoReemplazado }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1392,
        384
      ],
      "id": "ca4ab88b-ef77-49d2-9d55-78c5651fb8cb",
      "name": "edit"
    },
    {
      "parameters": {
        "jsCode": "\nconst textoEstructurado = $input.first().json.content.parts[0].text\n\nconst textoReemplazado = textoEstructurado.replace(/(?<=\\n) +/g, match => '&nbsp;'.repeat(match.length)).replace(/\\n/g, '<br>');\n\n\n// Asigna el resultado a donde necesites\n$input.first().json.content.parts[0].textoReemplazado = textoReemplazado;\n\nreturn $input.all();\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1552,
        384
      ],
      "id": "dbcf6bc3-0492-4b07-93d0-474a68c197a4",
      "name": "formatText"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9a0677ba-f1ff-4092-801e-8e62a7359b97",
              "leftValue": "={{ $json.changes }}",
              "rightValue": "=/(h?[aá]\\s*p?\\s*r\\s*[oó]\\s*[bv]\\s*[aá]\\s*d\\s*[oó])/i",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -224,
        144
      ],
      "id": "cfd3aa66-d8da-4657-9690-6267e54c66fe",
      "name": "approved"
    },
    {
      "parameters": {
        "action": "generate",
        "dataPropertyName": "uuid"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -1440,
        160
      ],
      "id": "4dc898ee-ac6c-4c77-987f-11fdc7b78807",
      "name": "createUUID"
    },
    {
      "parameters": {
        "jsCode": "const htmlContent = $input.first().json.body.content || '';\n// Dividir por la etiqueta <hr> y tomar solo la primera parte\nconst html_split = htmlContent.split(/<hr[^>]*>/gi);\nconst user_suggest = html_split[0] || '';\nconst previous_act = html_split[1] || '';\nconst regex = /-----PARÁMETROS PROPUESTOS-----([\\s\\S]*?)----/;\nconst match = previous_act.match(regex);\nlet textoExtraido = match ? match[1].trim() : '';\n\nconst formatHtmlContent = (html) => {\n  return html\n    .replace(/<div[^>]*>/gi, '') // Eliminar apertura de divs\n    .replace(/<\\/div>/gi, '\\n')   // Convertir cierre de divs en saltos de línea\n    .replace(/<br\\s*\\/?>/gi, '\\n') // Convertir <br> en saltos de línea\n    .replace(/&nbsp;/g, ' ')      // Reemplazar espacios no breaking\n    .replace(/\\n{3,}/g, '\\n\\n')   // Reducir múltiples saltos de línea\n    .replace(/<[^>]*>/g, '');     // Eliminar el resto de etiquetas HTML\n};\n\nconst changes = formatHtmlContent(user_suggest);\nconst previous_act_formatted = formatHtmlContent(textoExtraido);\n\n\nreturn [{ json: { changes: changes, previous_act_formatted: previous_act_formatted, previous_act: previous_act } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        144
      ],
      "id": "0ba98d9b-04db-4a7c-8c5f-7f0ba957f25b",
      "name": "cleanHTML"
    },
    {
      "parameters": {
        "jsCode": "const htmlContent = $input.first().json.body.content || '';\n// Dividir por la etiqueta <hr> y tomar solo la primera parte\nconst html_split = htmlContent.split(/<hr[^>]*>/i);\nconst user_suggest = html_split[0] || '';\n\n\nconst formatHtmlContent = (html) => {\n  return html\n    .replace(/<div[^>]*>/gi, '') // Eliminar apertura de divs\n    .replace(/<\\/div>/gi, '\\n')   // Convertir cierre de divs en saltos de línea\n    .replace(/<br\\s*\\/?>/gi, '\\n') // Convertir <br> en saltos de línea\n    .replace(/&nbsp;/g, ' ')      // Reemplazar espacios no breaking\n    .replace(/\\n{3,}/g, '\\n\\n')   // Reducir múltiples saltos de línea\n    .replace(/<[^>]*>/g, '');     // Eliminar el resto de etiquetas HTML\n};\n\nconst message = formatHtmlContent(user_suggest);\n\n\nreturn [{ json: { message: message } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1616,
        160
      ],
      "id": "df1b4e5c-b372-4e12-a5ac-5f60ad252bca",
      "name": "cleanHTML1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.microsoft.com/v1.0/me/events",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\",\n  \"Accept\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('formatDataForMeeting').item.json.output.body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        688,
        128
      ],
      "id": "2782aea3-023b-4a73-a62b-655680ff72dc",
      "name": "create_teams_meeting"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "Jr6M8Bl9qnNshRks",
          "mode": "list",
          "cachedResultName": "PDF_CONVOCATORIA"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "meeting_type": "={{ $('formatDataForMeeting').item.json.output.tipo }}",
            "meeting_datetime_ISO8631": "={{ $json.start.dateTime }}",
            "convocation_date_ISO8631": "={{ $('formatDataForMeeting').item.json.output.fecha }}",
            "attendees": "={{ $('formatDataForMeeting').item.json.output.asistentes }}",
            "teams_link": "={{ $json.onlineMeeting.joinUrl }}",
            "meeting_topics": "={{ $('formatDataForMeeting').item.json.output.temas }}",
            "session_code": "={{ $('formatDataForMeeting').item.json.output.session_code }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "meeting_type",
              "displayName": "meeting_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "meeting_datetime_ISO8631",
              "displayName": "meeting_datetime_ISO8631",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "convocation_date_ISO8631",
              "displayName": "convocation_date_ISO8631",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "session_code",
              "displayName": "session_code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "attendees",
              "displayName": "attendees",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array",
              "removed": false
            },
            {
              "id": "teams_link",
              "displayName": "teams_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "meeting_topics",
              "displayName": "meeting_topics",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array",
              "removed": false
            }
          ],
          "attemptToConvertTypes": true,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        880,
        128
      ],
      "id": "d2427be6-fe9a-4083-a55a-d37dbd3b4dcf",
      "name": "PDF_CONVOCATORIA"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "4PAizFbIt54ospAr",
          "mode": "list",
          "cachedResultName": "GUARDAR_DATOS_REUNION"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "topics": "={{ $('formatDataForMeeting').item.json.output.temas }}",
            "meeting_datetime_ISO8631": "={{ $('create_teams_meeting').item.json.start.dateTime }}",
            "convocation_date_ISO8631": "={{ $today.setLocale('es').toISODate() }}",
            "meeting_type": "={{ $('formatDataForMeeting').item.json.output.tipo }}",
            "attendees": "={{ $('formatDataForMeeting').item.json.output.asistentes }}",
            "id_meeting": "={{ $('createUUID').first().json.uuid }}",
            "session_code": "={{ $('formatDataForMeeting').item.json.output.session_code }}",
            "meeting_url": "={{ $('create_teams_meeting').item.json.onlineMeeting.joinUrl }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "id_meeting",
              "displayName": "id_meeting",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "meeting_url",
              "displayName": "meeting_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "meeting_datetime_ISO8631",
              "displayName": "meeting_datetime_ISO8631",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "convocation_date_ISO8631",
              "displayName": "convocation_date_ISO8631",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "meeting_type",
              "displayName": "meeting_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "session_code",
              "displayName": "session_code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "attendees",
              "displayName": "attendees",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array",
              "removed": false
            },
            {
              "id": "topics",
              "displayName": "topics",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1232,
        128
      ],
      "id": "c8e01250-ac9e-4ed7-b4c3-b1ecb1399b69",
      "name": "SAVE_METADATA"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "sessions_resolutions",
        "limit": 1,
        "filterType": "none"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        320,
        112
      ],
      "id": "3e8b2cb3-8c96-4b49-b622-f700acd61ff7",
      "name": "Get many rows"
    }
  ],
  "pinData": {
    "Microsoft Outlook Trigger": [
      {
        "json": {
          "@odata.etag": "W/\"CQAAABYAAABp+BPEgka1RYOOtkWcCwxJAAAEb78R\"",
          "id": "AAMkADliNjk4NDAzLTY2NzYtNGVjMi05YjIyLTBmZWQwZmJlY2JhOQBGAAAAAADErCGzx_TkTI9Izs2IzL6lBwBp_BPEgka1RYOOtkWcCwxJAAAAAAEMAABp_BPEgka1RYOOtkWcCwxJAAAEcnBnAAA=",
          "subject": "revisar",
          "body": {
            "contentType": "html",
            "content": "<html><head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><style type=\"text/css\" style=\"display:none\">\r\n<!--\r\np\r\n\t{margin-top:0;\r\n\tmargin-bottom:0}\r\n-->\r\n</style></head><body dir=\"ltr\"><div class=\"elementToProof\" style=\"font-family:Calibri,Helvetica,sans-serif; font-size:12pt; color:rgb(0,0,0)\">1 Fecha: 12/12/1996<br>2* Tipo: Ordinaria<br>3. Asistentes:<br>&nbsp;&nbsp; 3.1 Andrés Tituana - alvaro.andres1996@hotmail.com - Representante de Estudiantes<br>&nbsp;&nbsp; 3.2 Jennifer Tituana - mrwringo@hotmail.com - Miembro de la comisión de Etica<br>&nbsp;&nbsp; 3.3 Matthew Jaramillo - mnjaramillo@hotmail.com - Representante de profesores<br>4 Temas a resolver<br>&nbsp;&nbsp; 4.1 Aprobación de la designacion de los miembros del comité de ética del instituto superior tecnológico yaruquí, quedando conformado de la siguiente manera<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.1.1 Msc. Alfredo Armando Rodríquez Guzman, representante del Rector, como presidente del comité.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.2.2 Msc Dania Elena Portelles Cobas, Vicerrectora Académica<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.3.3 Adm. Carlos Eduardo Esterlla Carrera, docente de la carrera de Gastronomía en calidad de delegado del personal docente.<br>&nbsp;&nbsp; 4.2 Aprobación de la aceptación de la renuncia presentada por el Ing. Kevin Javier Aguilar Cuichán, Jefe de la Unidad de Tecnologías de la información y Comunicación.<br>&nbsp;&nbsp; 4.3 Aprobación de la actualización del Calendario Académico PAO 2025-II</div><div class=\"elementToProof\" style=\"font-family:Calibri,Helvetica,sans-serif; font-size:12pt; color:rgb(0,0,0)\"><br></div></body></html>"
          },
          "from": {
            "emailAddress": {
              "name": "Andres Tituana",
              "address": "alvaro.andres1996@hotmail.com"
            }
          }
        }
      }
    ],
    "Formatea Datos": [
      {
        "json": {
          "content": {
            "parts": [
              {
                "text": "1| Fecha Tentativa: 1996-12-12T12:00\n2| Tipo de sesión: Ordinaria\n3| Asistentes:\n   3.1| Andrés Tituana - alvaro.andres1996@hotmail.com - Representante de Estudiantes\n   3.2| Jennifer Tituana - carloswringo@gmail.com - Miembro de la comisión de Etica\n4| Temas a resolver\n   4.1| Aprobación de la designacion de los miembros del comité de ética del instituto superior tecnológico yaruquí, quedando conformado de la siguiente manera\n      4.1.1| Msc. Alfredo Armando Rodríquez Guzman, representante del Rector, como presidente del comité.\n      4.2.2| Msc Dania Elena Portelles Cobas, Vicerrectora Académica\n      4.3.3| Adm. Carlos Eduardo Esterlla Carrera, docente de la carrera de Gastronomía en calidad de delegado del personal docente.\n   4.2| Aprobación de la aceptación de la renuncia presentada por el Ing. Kevin Javier Aguilar Cuichán, Jefe de la Unidad de Tecnologías de la información y Comunicación.\n   4.3| Aprobación de la actualización del Calendario Académico PAO 2025-II"
              }
            ],
            "role": "model"
          },
          "finishReason": "STOP",
          "index": 0
        }
      }
    ]
  },
  "connections": {
    "Microsoft Outlook Trigger": {
      "main": [
        [
          {
            "node": "cleanHTML1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "Get many messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "cleanHTML",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply to a message": {
      "main": [
        [
          {
            "node": "Get many messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ExtractLastMailResponse": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many messages": {
      "main": [
        [
          {
            "node": "ExtractLastMailResponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get many messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatea Datos": {
      "main": [
        [
          {
            "node": "Get many rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Realizar Cambios": {
      "main": [
        [
          {
            "node": "formatText",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "formatDataForMeeting": {
      "main": [
        [
          {
            "node": "create_teams_meeting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "edit": {
      "main": [
        [
          {
            "node": "Reply to a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "formatText": {
      "main": [
        [
          {
            "node": "edit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "approved": {
      "main": [
        [
          {
            "node": "Formatea Datos",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Realizar Cambios",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "createUUID": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cleanHTML": {
      "main": [
        [
          {
            "node": "approved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cleanHTML1": {
      "main": [
        [
          {
            "node": "createUUID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sendDocument": {
      "main": [
        [
          {
            "node": "SAVE_METADATA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create_teams_meeting": {
      "main": [
        [
          {
            "node": "PDF_CONVOCATORIA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF_CONVOCATORIA": {
      "main": [
        [
          {
            "node": "sendDocument",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many rows": {
      "main": [
        [
          {
            "node": "formatDataForMeeting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d288f61d-f48c-40e8-859a-8f48c4c2077c",
  "meta": {
    "instanceId": "54ec11882ca9b3e82b062f751bf5d6c4d986ec6ac834af1d71fe0dcbd9b6a5cf"
  },
  "id": "SLVqwK2jzeuGVdkf",
  "tags": []
}