{
  "name": "GENERACION_EMBEDDINGS",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "watchFolder": true,
        "folderId": {
          "__rl": true,
          "value": "01ZX2MQXPX3EFJBW4PLBCKEUF7GCGHRL3D",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOneDriveTrigger",
      "typeVersion": 1,
      "position": [
        -336,
        -32
      ],
      "id": "075cf994-3519-4bb0-b852-f7cf72eee675",
      "name": "ESPERAR_SUBIDA",
      "credentials": {
        "microsoftOneDriveOAuth2Api": {
          "id": "Sk09Y3pRv4uy2lLG",
          "name": "Microsoft Drive account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://graph.microsoft.com/v1.0/drives/{{ $('Loop Over Items').item.json.parentReference_driveId }}/items/{{ $('Loop Over Items').item.json.file_id }}/content",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        992,
        144
      ],
      "id": "029c5ad8-87fd-4c17-8630-fc98846b9c02",
      "name": "DESCARCAR_ARCHIVO",
      "alwaysOutputData": false,
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "Y5GP57FlaZyiBK8B",
          "name": "Microsoft account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=TEXTO A ANALIZAR: \n{{ $json.text }}",
        "hasOutputParser": true,
        "needsFallback": true,
        "messages": {
          "messageValues": [
            {
              "message": "=# MISIÓN\n\nACTÚA COMO UN EXPERTO EN ESTRUCTURACIÓN DE DOCUMENTOS Y EXTRACCIÓN DE CONTENIDO.\n\n**OBJETIVO PRINCIPAL:** Tu misión es recibir un texto extraído vía OCR, determinar su estructura, segmentarlo en bloques lógicos, corregir errores y devolver una representación JSON limpia y **completamente unificada**, utilizando siempre la misma estructura de objeto para cada bloque de contenido.\n\n---\n\n# CONTEXTO\n\nEl texto que recibirás proviene de un proceso de OCR, por lo que puede contener errores de formato, ortografía y caracteres extraños. Los documentos pueden ser de dos tipos principales:\n1.  **Documentos Normativos:** Leyes, reglamentos, estatutos, etc., estructurados en Artículos, Disposiciones y Anexos.\n2.  **Documentos Informativos:** Informes, manuales, guías académicas, etc., estructurados por temas, secciones y subsecciones con títulos y contenido descriptivo.\n\n---\n\n# LÓGICA DE PROCESAMIENTO\n\nSigue estos pasos en orden estricto:\n\n**PASO 1: ANÁLISIS Y CLASIFICACIÓN DEL DOCUMENTO**\n* Si encuentras cualquier patron que denote que el contenido es un articulo, Disposicion, o Anexo como \"Art.\", \"Artículo\", \"Disposición\", \"ANEXO\" (con sus variaciones numéricas), clasifica el documento como **NORMATIVO** y aplica las **REGLAS PARA DOCUMENTOS NORMATIVOS**.\n* Si no encuentras esos marcadores, y el texto se organiza con títulos, subtítulos y párrafos descriptivos, clasifícalo como **INFORMATIVO** y aplica las **REGLAS PARA DOCUMENTOS INFORMATIVOS**.\n\n**PASO 2: APLICACIÓN DE REGLAS Y EXTRACCIÓN**\n* Aplica el conjunto de reglas correspondiente al tipo de documento identificado.\n\n**PASO 3: LIMPIEZA Y FORMATEO**\n* Durante todo el proceso, aplica las **REGLAS GENERALES** de corrección y manejo de tablas.\n\n---\n\n### **REGLAS PARA DOCUMENTOS NORMATIVOS**\n1.  **IDENTIFICAR EL FRAGMENTO INICIAL:** Barre el texto desde el principio. Todo el contenido que aparezca ANTES del primer marcador de artículo (como \"Art. 14\", \"Articulo 15\", etc.) debe ser considerado como un único bloque cohesivo. Este bloque es la continuación de un artículo de la página anterior. Agrupa todo este contenido inicial en un solo objeto JSON.\n    * En este objeto, los campos `numero` y `titulo` deben estar vacíos (`\"\"`).\n    * Todo el texto de este bloque debe ir dentro del campo `norma`.\n2.  **EXTRAER ARTÍCULOS:** Busca patrones como \"Art. #\", \"Artículo #\".\n    * Crea un objeto JSON por cada artículo.\n    * `tipo`: \"articulo\"\n    * `numero`: El número extraído del artículo (ej. \"14\").\n\t* `seccion_padre`: (String) El título del bloque jerárquico superior.\n    * `titulo`: La frase corta que sigue al número, antes del cuerpo principal.\n    * `contenido`: El resto del texto del artículo.\n3.  **EXTRAER DISPOSICIONES:** Busca numeros ordinales \"PRIMERA\", \"SEGUNDA\", \"TERCERA\" seguidos de \".-\" o similar, que indiquen una disposición.\n    * Crea un objeto JSON por cada disposición.\n    * `tipo`: \"disposicion\"\n    * `numero`: El ordinal en texto (ej. \"PRIMERA\").\n    * `titulo`: El texto que sigue inmediatamente al número ordinal, si lo hay, caso contrario, dejalo vacio.\n    * `seccion_padre`: (String) El título del bloque jerárquico superior.\n    * `contenido`: El cuerpo de la disposición.\n4.  **EXTRAER ANEXOS:** Busca patrones como \"ANEXO #\", \"Anexo A\".\n    * Crea un objeto JSON por cada anexo.\n    * `tipo`: \"anexo\"\n    * `numero`: El identificador del anexo (ej. \"1\", \"A\").\n    * `titulo`: El título del anexo.\n\t* `seccion_padre`: (String) El título del bloque jerárquico superior.\n    * `contenido`: La informacion estructurada.\n\n---\n\n### **REGLAS PARA DOCUMENTOS INFORMATIVOS**\n\n1.  **IDENTIFICAR UNIDADES SEMÁNTICAS POR TÍTULOS:** La segmentación se basa en los títulos y subtítulos. Cada uno marca el inicio de un nuevo bloque de contenido.\n    * Considera como título cualquier línea que, por su formato (mayúsculas, brevedad) y su posición, funcione como un encabezado para el texto que le sigue.\n\n2.  **EXTRAER SECCIONES:** Por cada unidad semántica, crea un objeto JSON:\n    * **`tipo`**: \"seccion\".\n    * **`titulo`**: El texto del título/subtítulo (ej. \"Gastronomía\", \"Programa Nro.1: Investigación...\", \"Objetivos Generales\"), si no encuentras ningun titulo, deja este campo vacío.\n    * **`numero`**: Analiza el `titulo` en busca de un identificador alfanumérico al inicio (ej. \"2.1.\", \"A)\", \"Programa Nro.1\"). Si lo encuentras, extráelo aquí. Si no, déjalo vacío.\n    * **`seccion_padre`**: Infiere el título de la sección principal a la que pertenece este bloque. Si es una sección de primer nivel, déjalo vacío.\n    * **`contenido`**: Todo el texto (párrafos, listas) que pertenece a esa sección hasta el siguiente título.\n\n---\n\n### **REGLAS GENERALES (APLICABLES A TODOS LOS DOCUMENTOS)**\n\n1.  **CORRECCIÓN Y LIMPIEZA:** Corrige errores de OCR y ortografía. Elimina encabezados, pies de página y saltos de línea innecesarios. **No alteres el significado original.**\n2.  **ESTRUCTURACIÓN DE TABLAS Y LISTAS:** Si detectas contenido de tablas o listas desordenado por el OCR, reestructúralo dentro del campo `contenido` usando Markdown para mantener su legibilidad y relaciones clave-valor.\n\n---\n\n# ESTRUCTURA DE SALIDA UNIFICADA\n\nDevuelve un único array de objetos JSON. **Cada objeto en el array, sin excepción, debe seguir esta estructura:**\n\n* **`tipo`**: (String) El tipo de bloque extraído. Ej: \"articulo\", \"disposicion\", \"seccion\", \"capitulo\", \"fragmento_continuacion\".\n* **`numero`**: (String) El identificador numérico o alfanumérico del bloque, si existe. Si no, `\"\"`.\n* **`titulo`**: (String) El título o nombre descriptivo del bloque. Si no existe, `\"\"`.\n* **`seccion_padre`**: (String) El título del bloque jerárquico superior.\n* **`contenido`**: (String) El texto principal del bloque, limpio y formateado.\n"
            }
          ]
        },
        "batching": {
          "batchSize": 20
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1728,
        -64
      ],
      "id": "a206fab9-3fee-453a-9399-2723422cb71f",
      "name": "Basic LLM Chain",
      "retryOnFail": true
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"array\",\n\t\"items\": {\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n          \"tipo\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t\"numero\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t\"titulo\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t\"contenido\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n           \"seccion_padre\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t}\n\t}\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1968,
        128
      ],
      "id": "fcf9a5cb-e60e-4e0d-bef9-eb4f669beeac",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "// Inicializar un array vacío para los artículos unificados\nlet articulosUnificados = [];\n\n// Iterar sobre cada item del input\nfor (let item of items) {\n    // Verificar que el item tenga la propiedad 'output' y que sea un array\n    if (item.json.output && Array.isArray(item.json.output)) {\n        // Concatenar los elementos de 'output' al array unificado\n        articulosUnificados = articulosUnificados.concat(item.json.output);\n    }\n}\n\n// Devolver un único item con la propiedad \"articulos\" que contiene el array unificado\nreturn [{\n    json: {\n        articulos: articulosUnificados\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2032,
        -64
      ],
      "id": "486d477e-17b0-462c-9473-4096a720edc8",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el array de artículos del primer item\nlet articulos = items[0].json.articulos;\n\n// Array para almacenar el resultado\nlet resultado = [];\n\n// Recorrer todos los artículos\nfor (let i = 0; i < articulos.length; i++) {\n    let actual = articulos[i];\n\n    //agrego metadata al artículo antes de procesarlo\n    actual.document_name = $('Loop Over Items').first().json.filename\n    // Si el artículo actual tiene un número de artículo válido\n    if (actual.articulo && actual.articulo.trim() !== \"\") {\n        resultado.push(actual);\n    } \n    // Si el artículo actual está vacío y hay artículos previos\n    else if (resultado.length > 0) {\n        // Obtener el último artículo agregado al resultado\n        let ultimoArticulo = resultado[resultado.length - 1];\n        \n        // Concatenar la norma del artículo vacío al último artículo\n        ultimoArticulo.norma += \" \" + actual.norma;\n    }\n    // Si el primer artículo está vacío, lo agregamos tal cual\n    else {\n        resultado.push(actual);\n    }\n    actual.norma = actual.titulo +\" - \"+ actual.norma\n}\n\n// Devolver el resultado como un único item\nreturn [{\n    json: {\n        articulos: resultado\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2224,
        -64
      ],
      "id": "f91e6e1f-2c41-4c39-8029-0c3212040cac",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-embedding-001"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        2608,
        64
      ],
      "id": "72fa970d-533e-4421-b5e0-fedf05c00303",
      "name": "Embeddings Google Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "0Zr2gDUeSEg2Xe6E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "embeddingBatchSize": 20,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        2672,
        -128
      ],
      "id": "1ef9d067-c77e-4e92-b548-587123c31d8f",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "7iDL76ggTML8vg0b",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "articulos",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2416,
        -64
      ],
      "id": "164f087d-8b60-4801-b35c-eefc0e0f09e3",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.norma }}",
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "articulo",
                "value": "={{ $json.articulo }}"
              },
              {
                "name": "titulo",
                "value": "={{ $json.titulo }}"
              },
              {
                "name": "document_name",
                "value": "={{ $json.document_name }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        2800,
        16
      ],
      "id": "54caa09b-d169-429f-8c63-10215378dabe",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkSize": 2000,
        "chunkOverlap": 200,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2912,
        160
      ],
      "id": "147fbbea-c7d7-4028-a4a3-8a383f3b6498",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e536b8ba-fa8e-41fc-bc8d-b7867f545478",
              "leftValue": "={{ $json.last_Modifies_Database }}",
              "rightValue": "={{ $('Edit Fields').item.json.last_ModifiedDateTime }}",
              "operator": {
                "type": "dateTime",
                "operation": "before"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        256,
        -16
      ],
      "id": "c46c219b-064d-47fe-9100-7e9d066d2caa",
      "name": "Filter"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e34bd100-a598-4edd-b740-719c0475f482",
              "name": "file_id",
              "value": "={{ $('Sort').item.json.id }}",
              "type": "string"
            },
            {
              "id": "c44cff44-c3f4-45dd-830f-35034660802b",
              "name": "last_ModifiedDateTime",
              "value": "={{ $('Sort').item.json.lastModifiedDateTime }}",
              "type": "string"
            },
            {
              "id": "7d4b3e49-88da-4d00-9e1e-2d11ed909634",
              "name": "parentReference_driveId",
              "value": "={{ $('Sort').item.json.parentReference.driveId }}",
              "type": "string"
            },
            {
              "id": "4ae00074-2007-439f-808e-b21f2d6327fa",
              "name": "filename",
              "value": "={{ $('Sort').item.json.name }}",
              "type": "string"
            },
            {
              "id": "f693dbac-d5b2-4f87-9328-830847791148",
              "name": "last_Modifies_Database",
              "value": "={{ $json.last_modified }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        96,
        -32
      ],
      "id": "a977d238-dd18-40b0-accc-fa80e9e7533d",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "lastModifiedDateTime",
              "order": "=ascending"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        -192,
        -32
      ],
      "id": "5c8fd534-0f61-43f8-b2c5-80bdafbd4525",
      "name": "Sort"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        464,
        32
      ],
      "id": "dae33708-4182-45dc-8f09-b5c6c361b4a6",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "lastmodified",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "gt",
              "keyValue": "=0"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "last_modified",
              "fieldValue": "={{ $('Loop Over Items').first().json.last_ModifiedDateTime }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3248,
        128
      ],
      "id": "b41758cd-d2e2-47ab-8f30-5146e32ad5ce",
      "name": "Update a row",
      "credentials": {
        "supabaseApi": {
          "id": "7iDL76ggTML8vg0b",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "documents",
        "filterType": "string",
        "filterString": "=metadata->>document_name=ilike.*{{ $json.filename }}*"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        640,
        112
      ],
      "id": "ac61d6d4-7f8e-41ee-b863-9b108d927b1c",
      "name": "BORRAR_EMBEDDINGS",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "7iDL76ggTML8vg0b",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "inputDataFieldName": "=data",
        "options": {
          "language": "spa"
        }
      },
      "type": "n8n-nodes-tesseractjs.tesseractNode",
      "typeVersion": 1,
      "position": [
        1584,
        128
      ],
      "id": "dee199e2-c888-4b88-b995-b623f9baa958",
      "name": "EXTRAER_TEXTO"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "lastmodified",
        "limit": 1
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -48,
        -32
      ],
      "id": "a81daf5e-5c8f-41fc-ad23-c87ad8eea47e",
      "name": "Get many rows",
      "credentials": {
        "supabaseApi": {
          "id": "7iDL76ggTML8vg0b",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        816,
        112
      ],
      "id": "78a0cee8-6d2f-4183-bf7b-34c480be7f79",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a2cda01-249d-4bf6-ad22-e25ab64e773b",
              "leftValue": "={{ $json.data.length }}",
              "rightValue": 1000,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1296,
        -32
      ],
      "id": "41589ae2-952f-4042-878d-ee19dd0c6d11",
      "name": "ES_TEXTO"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto de la variable\nconst texto = $input.first().json.data\n\n// Verificar si el texto existe\nif (!texto) {\n  return [{ json: { error: \"No se encontró texto para procesar\" } }];\n}\n\n// Dividir el texto en bloques de ~600 caracteres preservando palabras\nconst longitudMaxima = 4000;\nconst bloques = [];\nlet inicio = 0;\n\nwhile (inicio < texto.length) {\n  let fin = Math.min(inicio + longitudMaxima, texto.length);\n  \n  // Si no estamos al final del texto, buscar el último espacio para no cortar palabras\n  if (fin < texto.length) {\n    const ultimoEspacio = texto.lastIndexOf(' ', fin);\n    if (ultimoEspacio > inicio) {\n      fin = ultimoEspacio;\n    }\n  }\n  \n  const bloque = texto.substring(inicio, fin).trim();\n  if (bloque) {\n    bloques.push(bloque);\n  }\n  \n  inicio = fin + 1; // +1 para saltar el espacio\n}\n\n// Crear items para el siguiente nodo\nconst items = bloques.map((bloque, index) => ({\n  json: {\n    text: bloque,\n    bloqueNumero: index + 1,\n    totalBloques: bloques.length,\n    longitud: bloque.length\n  }\n}));\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1536,
        -160
      ],
      "id": "8c228797-5787-4ad0-a448-4538b0563658",
      "name": "DIVIDIR_TEXTO"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1456,
        128
      ],
      "id": "ec473333-b881-40ad-8343-728a9bdb8873",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.1.199:5000/extract-text",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1152,
        -32
      ],
      "id": "4cb521de-f201-442d-80b8-d81bfd984db7",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "url": "=https://graph.microsoft.com/v1.0/me/drive/root/children",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        112,
        -224
      ],
      "id": "cbfca825-9f0b-4422-8d04-ffd27bfe2817",
      "name": "VER_CARPETAS",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "Y5GP57FlaZyiBK8B",
          "name": "Microsoft account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1568,
        368
      ],
      "id": "7f92853e-0fb8-441a-875f-4b8456745441",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "0Zr2gDUeSEg2Xe6E",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1840,
        128
      ],
      "id": "c3542080-13e6-45bd-a7ff-3d043526b9b8",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "0Zr2gDUeSEg2Xe6E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1888,
        320
      ],
      "id": "910237c2-8268-44a3-b02f-a51ce8640ed3",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "0Zr2gDUeSEg2Xe6E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "deepseek-reasoner",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        1728,
        128
      ],
      "id": "42b6e62c-dea7-4824-9250-d261d1368b20",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "3UFgNLDytpRNxPz0",
          "name": "DeepSeek account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "ESPERAR_SUBIDA": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DESCARCAR_ARCHIVO": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "Get many rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "BORRAR_EMBEDDINGS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update a row": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BORRAR_EMBEDDINGS": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EXTRAER_TEXTO": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Update a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many rows": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "DESCARCAR_ARCHIVO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ES_TEXTO": {
      "main": [
        [
          {
            "node": "DIVIDIR_TEXTO",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DIVIDIR_TEXTO": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "EXTRAER_TEXTO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "ES_TEXTO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5e55a741-7212-4d70-846f-16c17b05678b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "54ec11882ca9b3e82b062f751bf5d6c4d986ec6ac834af1d71fe0dcbd9b6a5cf"
  },
  "id": "CH0z9r0Q0e08azMb",
  "tags": []
}